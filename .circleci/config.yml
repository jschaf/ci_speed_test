version: 2


aliases:
  # Gets a shallow clone of the repo. The reason we have to do this ourselves is
  # because GitHub doesn't like shallow clones because they're computationally
  # expensive so CircleCI won't offer it. See:
  # https://github.com/circleci/circleci-docs/issues/2040#issuecomment-368129275
  - &RUN_CHECKOUT_SHALLOW_GIT_REPO
    run:
      name: Checkout a Git repo with a shallow depth
      command: |
        # Add github.com to known hosts
        mkdir -p ${HOME}/.ssh
        printf 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        ' >> ${HOME}/.ssh/known_hosts
        printf 'UserKnownHostsFile ~/.ssh/known_hosts\n' >> ${HOME}/.ssh/config


        # Run in subshell to avoid changing umask for the entire script.
        # umask 077 creates files with permission 600.
        (umask 077; touch ${HOME}/.ssh/id_rsa)
        chmod 0600 ${HOME}/.ssh/id_rsa
        (echo "${CHECKOUT_KEY:-}" > ${HOME}/.ssh/id_rsa)

        git config --global gc.auto 0
        git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'

        REPO_DIR="/home/ci/${CIRCLE_PROJECT_REPONAME}"
        mkdir -p "${REPO_DIR}"
        cd "${REPO_DIR}"
        # We always expect this step to be called in a fresh container.
        if [[ -d .git ]]; then
          echo "ERROR: Git directory already exists at ${PWD}."
          exit 1
        fi

        handle_failed_git_fetch() {
          printf "ERROR: failed to fetch from GitHub. Possible causes:
            - Look two lines up for fatal logs.
            - The Git version ($(git --version)) isn't new enough to fetch a
              SHA1 hash directly.
            - UNLIKELY: GitHub is rate-limiting us for using the --depth=1 option.
              https://github.com/circleci/circleci-docs/issues/2040#issuecomment-368129275'
          "
          exit 1
        }

        printf "
        # Cloning repo and fetching the right commit
        ============================================
        Fetching from: ${CIRCLE_REPOSITORY_URL}
        Working dir:   ${REPO_DIR}
        SHA1 Hash:     ${CIRCLE_SHA1}
        Branch:        ${CIRCLE_BRANCH}
        Tag:           ${CIRCLE_TAG:-<no tag for this commit>}\n\n"

        git init --quiet
        git remote add origin "${CIRCLE_REPOSITORY_URL}"
        # Fetch the repo contents at SHA1 directly into the local
        # branch $BRANCH_NAME.
        #
        # --depth=1 for a shallow clone.
        # --update-head-ok to allow updating the current HEAD. Occurs when
        #     CIRCLE_BRANCH is master.
        # --force to always update the local branch.
        printf 'Fetching\n'
        GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" \
            git fetch --depth=1 --update-head-ok --force origin \
                "${CIRCLE_SHA1}:${CIRCLE_BRANCH}" || handle_failed_git_fetch
        git checkout --quiet ${CIRCLE_BRANCH}

  - &RUN_CREATE_NODE_MODULES_CACHE_KEY
    run:
      name: Creating node_modules cache key from patches/* and package-lock.json
      command: .circleci/create_node_modules_cache_key.sh

  # To bust the cache, increment the cache key, e.g. v1 to v2. You might
  # need to bust the cache if the caching logic has a bug.
  # https://circleci.com/docs/2.0/caching/#restoring-cache
  - &NODE_MODULES_CACHE_RESTORE_KEY
    keys:
      - node-modules-ci-cache-test-v1-{{ checksum ".circleci/node_modules_cache_key" }}

  - &NODE_MODULES_CACHE_SAVE_KEY
    key: node-modules-ci-cache-test-v1-{{ checksum ".circleci/node_modules_cache_key" }}

  - &NODE_MODULES_PRECHECK_CACHE_RESTORE_KEY
    keys:
      - node-modules-ci-cache-precheck-test-v1-{{ checksum ".circleci/node_modules_cache_key" }}

  - &NODE_MODULES_PRECHECK_CACHE_SAVE_KEY
    key: node-modules-ci-cache-precheck-test-v1-{{ checksum ".circleci/node_modules_cache_key" }}

  - &SET_WORKING_DIR_TO_REPO
    working_directory: /home/ci/ci_speed_test

  - &USE_DOCKER_DEBIAN_NODE_IMAGE
    docker:
      - image: jschaf/debian-ci-node:latest

  - &USE_DOCKER_NODE_IMAGE
    docker:
      - image: jschaf/distroless-ci-node:latest

  - &ATTACH_CODE_WORKSPACE
    attach_workspace:
      at: /home/ci/ci_speed_test

  - &RESTORE_NODE_MODULES_CACHE
    restore_cache:
      name: Restoring cache for node_modules
      <<: *NODE_MODULES_CACHE_RESTORE_KEY
jobs:
  # Checks out the repo and persists it to a CircleCI workspace so it can be
  # used by all subsequent jobs in a single CircleCI workflow.
  checkout_repo:
    docker:
      - image: jschaf/distroless-ci:latest
    <<: *SET_WORKING_DIR_TO_REPO
    steps:
      - <<: *RUN_CHECKOUT_SHALLOW_GIT_REPO
      - <<: *RUN_CREATE_NODE_MODULES_CACHE_KEY
      - persist_to_workspace:
          root: /home/ci/ci_speed_test
          paths:
            - .

  # Builds and caches node_modules if the cache key has changed.
  build_node_modules:
    <<: *USE_DOCKER_NODE_IMAGE
    <<: *SET_WORKING_DIR_TO_REPO
    steps:
      - <<: *RUN_CHECKOUT_SHALLOW_GIT_REPO
      - <<: *RUN_CREATE_NODE_MODULES_CACHE_KEY
      # Restore the cache key to see if we even need to fetch the node_modules
      # cache.  Restoring the full cache is slow.
      - restore_cache:
          name: Restoring node_modules precheck cache key
          <<: *NODE_MODULES_PRECHECK_CACHE_RESTORE_KEY
      - run:
          name: Installing NPM dependencies into node_modules
          command: .circleci/run_npm_install.sh
      - save_cache:
          name: Saving cache for node_modules precheck key
          <<: *NODE_MODULES_PRECHECK_CACHE_SAVE_KEY
          paths:
            - /home/ci/ci_speed_test/.circleci/node_modules_precheck_cache_key
      - save_cache:
          name: Saving cache for node_modules
          <<: *NODE_MODULES_CACHE_SAVE_KEY
          paths:
            - /dev/shm/ci/ci_speed_test/node_modules

  run_test_debian:
    <<: *USE_DOCKER_DEBIAN_NODE_IMAGE
    <<: *SET_WORKING_DIR_TO_REPO
    steps:
      - <<: *ATTACH_CODE_WORKSPACE
      - <<: *RESTORE_NODE_MODULES_CACHE
      - run:
          name: Hello
          command: echo hi

  run_test_alpine:
    <<: *USE_DOCKER_NODE_IMAGE
    <<: *SET_WORKING_DIR_TO_REPO
    steps:
      - <<: *ATTACH_CODE_WORKSPACE
      - <<: *RESTORE_NODE_MODULES_CACHE
      - run:
          name: Hello
          command: echo hi

workflows:
  version: 2
  test:
    jobs:
      - checkout_repo
      - build_node_modules
      - run_test_debian:
          requires:
            - checkout_repo
            - build_node_modules
#      - run_test_alpine:
#          requires:
#            - checkout_repo
#            - build_node_modules
#      - run_test_debian:
#          requires:
#            - checkout_repo
#            - build_node_modules
#      - run_test_alpine:
#          requires:
#            - checkout_repo
#            - build_node_modules
  # Check that the checkout_repo job correctly sets the tag.
  tagged_test:
    jobs:
      - checkout_repo:
          filters:
            tags:
              only: /^.*/
